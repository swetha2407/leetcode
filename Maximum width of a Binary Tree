class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root==null){
            return 0;
        } 
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        Map<TreeNode,Integer> map = new HashMap<>();
        q.add(root);
        map.put(root,1);
        int max = 0;
        while(!q.isEmpty()){
            int size = q.size();
            int level = map.get(q.peek());
            int start = 0;
            int end = 0;
            for(int i=0;i<size;i++){ 
                TreeNode node = q.poll();
                if(i==0) start = map.get(node);
                if(i==size-1) end = map.get(node);
                if(node.left!=null){
                    map.put(node.left,2*map.get(node));
                    q.add(node.left);
                } 
                if(node.right!=null){
                    map.put(node.right,2*map.get(node)+1);
                    q.add(node.right);
                }  
            } 
             max = Math.max(max,end-start+1);
        } 
        return max;
    }
}
